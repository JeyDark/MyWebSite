from django.shortcuts import render
from django.template.loader import render_to_string
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from io import BytesIO
from reportlab.lib.pagesizes import letter, landscape,A4,A3
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Image,Spacer
from .models import ContactModel
from django.core.mail import send_mail
from django.conf import settings

#from weasyprint import HTML

def generate_pdf(request):

    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Dessinez le contenu du PDF
    p.drawString(100, height - 100, "Hello World")
    p.drawString(100, height - 120, "This is a PDF generated by ReportLab")

    # Finalisez le PDF
    p.showPage()
    p.save()

    # Rewind le buffer pour lire le PDF
    buffer.seek(0)

    # Créez une réponse HTTP avec le contenu du PDF
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="resume.pdf"'

    return response

#pdf_2
def generate_pdf2(request):
    # Créez un objet BytesIO pour stocker le PDF temporairement
    buffer = BytesIO()
    
    # Créez un document PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4)

    # Styles de paragraphes
    styles = getSampleStyleSheet()
    subtitle_style = ParagraphStyle(
    'Subtitle',
    parent=styles['Heading2'],
    fontSize=13,
    spaceBefore=10,
    spaceAfter=10,
    alignment=0# Centrer le texte 
)
    normal_style = styles['Normal']
    title_style = styles['Title']
    
    # Créez des éléments du document
    content = []

    # Ajout d'un titre
    title = Paragraph("Resumer", title_style)
    content.append(title)
    
    
    # Ajout de texte formaté
    liste = [
        'Expérience',
        '2023 - Present',
        'développeur web',
        'Léon Hotel',
        'Kinshasa, Rdc',
        'Resumer: Aux contraintes rencontré lié au système de gestion de stock à la dite entréprise, nous avions pu concevoir un logiciel appeler SNARK conformement aux réalités du terrein à la demande  des utilisateurs.',
        '------------------',
        '2024 Janvier-Avril',
        'consultant',
        'Technovrac',
        'Kinshasa, Rdc',
        "Resumer: En tant que dévéloppeur web consultant à Technovrac pendans une courte periode de 4mois selon la durée du projet en partenaria avec cicos, nous avons pu dévélopper un logiciel du guichet unique au port de Soyo à angola, apres une descente sur le terain en faisant très minicieusement l'analyse de l'existant nous avions pu réaliser ce logiciel prêt à l'emploie",
        '------------------',
        '2021 - 2023',
        'Encadreur en programmation',
        'Iss/Kin',
        'Kinshasa, Rdc',
        "Resumer: c'est pendant cette periode que j'ai travaillé à l'encadrement des etudiant de G1,G2(L1,L2) et ceux du terminal sur la Conception et dévéloppement de leur application de l'epreuve de fin de cycle(TFC,MEMOIRE)",
        'Education',
        '2020 - 2025',
        'Iss/Kin',
        'Kinshasa',
        'a) Analyste Programmeur & dévéllopeur web-mobil',
        'b) It en Reseaux informatique',
        "Mes 5 années d'apprentissage et d'investissement dans un établissement supéruer academique",
        'Profession Competance',
        'a) Web - Designer',
        'b) Analyste Programmeur',
        'c) Dévéloppeur Web',
        '- Html,Css,JavaScript,',
        '- Python,Django,Flutter',
        ]
    identite = [
        "Nom: Yeta",
        "Post-Nom: Ekama",
        'Prenom: Jey',
        'Proféssion: Dévéloppeur web & mobile'
    ]
    for line in identite:
        text = Paragraph(line, normal_style)
        content.append(text)
    for line in liste:
        if "Expérience" in line:
           index = liste.index(line) 
           soustitre = Paragraph(line, subtitle_style)
           content.append(soustitre)
           content.append(Spacer(1, 1))
        elif "Education" in line:
           index = liste.index(line) 
           liste[index] = ""
           soustitre = Paragraph(line, subtitle_style)
           content.append(soustitre)
           content.append(Spacer(1, 1))
        elif "Profession Competance" in line:
           index = liste.index(line) 
           liste[index] = ""
           soustitre = Paragraph(line, subtitle_style)
           content.append(soustitre)
           content.append(Spacer(1, 1))
        
        text1 = Paragraph(line, normal_style)
        content.append(text1)

    """ 
    # Ajout d'une image
    try:
        img = Image('image/Capture.png')
        img.width = 2*inch
        img.height = 2*inch
        img.hAlign = 'CENTER'
        content.append(img)
    except:
        content.append(Paragraph("Image non trouvée.", normal_style)) 
    """
    """ 
    # Ajout d'un tableau
    data = [
        ['Item', 'Description', 'Prix'],
        ['Produit 1', 'Description du produit 1', '$10'],
        ['Produit 2', 'Description du produit 2', '$20'],
    ]

    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), '#d5d5d5'),
        ('TEXTCOLOR', (0, 0), (-1, 0), '#000000'),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), '#f5f5f5'),
        ('GRID', (0, 0), (-1, -1), 1, '#000000'),
    ]))
    content.append(table) 
    """

    # Générer le PDF
    doc.build(content)

    # Rewind le buffer pour lire le PDF
    buffer.seek(0)

    # Créez une réponse HTTP avec le contenu du PDF
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="resume.pdf"'

    return response
def sendMessage(request):
    pass
def Home(request):

    return render(request,'index.html')

def Projects(request):
    
    return render(request,'projects.html')

def Resume(request):
    
    return render(request, 'resume.html')

def Contact(request):
    
    context = {
        'message' :""
    }
    if request.method == 'POST':
       name = request.POST.get('name')
       number = request.POST.get('number')
       address = request.POST.get('email')
       message = request.POST.get('message')
       subject = "mail client"

       """ if not name == "" and number == "" and email == "" and message == "":
          obj = ContactModel.objects.create(name=name,number=number,email=email,message=message)
          obj.save() """
       for value in request.POST.values():
           if value == "":
              context['message'] = 'veuillez remplir  tous les champs'
           else:
              obj = ContactModel.objects.create(name=name,number=number,email=address,message=message)
              obj.save()
              send_mail(subject, message, settings.EMAIL_HOST_USER, [address])
              context['message'] = 'mail envoyer avec succès! vous recevrais une reponse dans plus ou moins deux jours merci pour votre patience'

    return render(request, 'contact.html',context)

"""

def generate_pdf(request):
    # Créez un objet BytesIO pour stocker le PDF temporairement
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Dessinez le contenu du PDF
    p.drawString(100, height - 100, "Hello World")
    p.drawString(100, height - 120, "This is a PDF generated by ReportLab")

    # Finalisez le PDF
    p.showPage()
    p.save()

    # Rewind le buffer pour lire le PDF
    buffer.seek(0)

    # Créez une réponse HTTP avec le contenu du PDF
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="example.pdf"'
"""